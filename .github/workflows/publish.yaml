name: Main • Tag, Release & PyPI
on:
  push:
    branches: [main]
permissions:
  contents: write # necessário para criar tag/release
jobs:
  build:
    name: Build wheels & sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.22"
    - name: Extract version from pyproject.toml
      id: meta
      shell: bash
      run: |
        VER=$(python - <<'PY'
        import re, pathlib
        s = pathlib.Path("pyproject.toml").read_text()
        m = re.search(r'(?m)^\s*version\s*=\s*"([^"]+)"', s)
        print(m.group(1) if m else "")
        PY
        )
        echo "version=$VER" >> $GITHUB_OUTPUT
    - name: Ensure clean release version (no .dev)
      if: contains(steps.meta.outputs.version, '.dev')
      run: |
        echo "A versão do pyproject.toml não pode conter sufixo .dev na main." >&2
        exit 1
    - name: Install build deps
      run: python -m pip install --upgrade pip build twine cibuildwheel
    - name: Build wheels
      env:
        CIBW_SKIP: "pp* *-musllinux*"
      run: python -m cibuildwheel --output-dir dist
    - name: Build sdist
      run: python -m build --sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/*

  tag-and-release:
    name: Create tag & GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Read version
      id: meta
      run: |
        VER=$(python - <<'PY'
        import re, pathlib
        s = pathlib.Path("pyproject.toml").read_text()
        m = re.search(r'(?m)^\s*version\s*=\s*"([^"]+)"', s)
        print(m.group(1) if m else "")
        PY
        )
        echo "version=$VER" >> $GITHUB_OUTPUT
        echo "tag=v$VER"   >> $GITHUB_OUTPUT
    - name: Create tag if not exists
      run: |
        TAG="${{ steps.meta.outputs.tag }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG já existe, seguindo..."
        else
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"
        fi
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-all
    - name: Flatten artifacts to dist
      run: |
        mkdir -p dist
        find dist-all -type f -name '*.whl' -exec cp {} dist/ \;
        find dist-all -type f -name '*.tar.gz' -exec cp {} dist/ \;
        ls -l dist
    - name: Create GitHub Release (idempotente)
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        name: Release ${{ steps.meta.outputs.tag }}
        draft: false
        prerelease: false
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [build, tag-and-release]
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-all
    - name: Collect dists
      run: |
        mkdir -p dist
        find dist-all -type f -name '*.whl' -exec cp {} dist/ \;
        find dist-all -type f -name '*.tar.gz' -exec cp {} dist/ \;
        ls -l dist
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m pip install --upgrade twine
        python -m twine upload dist/*